{"version":3,"sources":["hooks/use-input.js","components/BasicForm.js","App.js","index.js"],"names":["initialInputState","value","isTouched","inputStateReducer","state","action","type","useInput","validateValue","useReducer","inputState","dispatch","valueIsValid","hasError","isValid","valueChangeHandler","event","target","inputBlurHandler","reset","isNotEmpty","name","trim","validateEmail","email","test","BasicForm","props","enteredName","nameIsValid","nameInputHasError","nameChangeHandler","nameBlurHandler","resetName","enteredLastName","lastNameIsValid","lastNameInputHasError","lastNameChangeHandler","lastNameBlurHandler","resetlastName","enteredEmail","emailIsValid","emailInputHasError","emailChangeHandler","emailBlurHandler","resetEmail","isFormValid","nameClasses","lastNameClasses","emailClasses","onSubmit","preventDefault","console","log","className","htmlFor","id","onChange","onBlur","disabled","App","ReactDOM","createRoot","document","getElementById","render"],"mappings":"yMAEMA,EAAoB,CACxBC,MAAO,GACPC,WAAW,GAGPC,EAAoB,SAACC,EAAOC,GAChC,MAAoB,UAAhBA,EAAOC,KACF,CAAEL,MAAOI,EAAOJ,MAAOC,UAAWE,EAAMF,WAE7B,SAAhBG,EAAOC,KACF,CAAEL,MAAOG,EAAMH,MAAOC,WAAW,IAEtCG,EAAOC,KACFN,EAGV,EAiCcO,EA/BE,SAACC,GAChB,MAA+BC,qBAC7BN,EACAH,GAFF,mBAAOU,EAAP,KAAmBC,EAAnB,KAKMC,EAAeJ,EAAcE,EAAWT,OACxCY,GAAYD,GAAgBF,EAAWR,UAc7C,MAAO,CACLD,MAAOS,EAAWT,MAClBa,QAASF,EACTC,WACAE,mBAhByB,SAACC,GAC1BL,EAAS,CAAEL,KAAM,QAASL,MAAOe,EAAMC,OAAOhB,OAC/C,EAeCiB,iBAbuB,SAACF,GACxBL,EAAS,CAAEL,KAAM,QAClB,EAYCa,MAVY,WACZR,EAAS,CAAEL,KAAM,SAClB,EAUF,E,OC/CKc,EAAa,SAACC,GAAD,MAA0B,KAAhBA,EAAKC,MAAf,EAEbC,EAAgB,SAACC,GAErB,MADW,eACDC,KAAKD,EAChB,EA4GcE,EA1GG,SAACC,GACjB,MAOIpB,EAASa,GANJQ,EADT,EACE3B,MACS4B,EAFX,EAEEf,QACUgB,EAHZ,EAGEjB,SACoBkB,EAJtB,EAIEhB,mBACkBiB,EALpB,EAKEd,iBACOe,EANT,EAMEd,MAGF,EAOIZ,EAASa,GANJc,EADT,EACEjC,MACSkC,EAFX,EAEErB,QACUsB,EAHZ,EAGEvB,SACoBwB,EAJtB,EAIEtB,mBACkBuB,EALpB,EAKEpB,iBACOqB,EANT,EAMEpB,MAGF,EAOIZ,EAASgB,GANJiB,EADT,EACEvC,MACSwC,EAFX,EAEE3B,QACU4B,EAHZ,EAGE7B,SACoB8B,EAJtB,EAIE5B,mBACkB6B,EALpB,EAKE1B,iBACO2B,EANT,EAME1B,MAGI2B,EAAcjB,GAAeM,GAAmBM,EAgBhDM,EAAejB,EAEjB,uBADA,eAGEkB,EAAmBZ,EAErB,uBADA,eAGEa,EAAgBP,EAElB,uBADA,eAGJ,OACE,uBAAMQ,SA3BqB,SAAClC,GAC5BA,EAAMmC,iBAEDL,IAILM,QAAQC,IAAIzB,EAAaM,EAAiBM,GAE1CP,IACAM,IACAM,IACD,EAeC,UACE,sBAAKS,UAAU,gBAAf,UACE,sBAAKA,UAAWP,EAAhB,UACE,uBAAOQ,QAAQ,aAAf,wBACA,uBACEjD,KAAK,OACLkD,GAAG,aACHvD,MAAO2B,EACP6B,SAAU1B,EACV2B,OAAQ1B,IAETF,GACC,mBAAGwB,UAAU,aAAb,wCAGJ,sBAAKA,UAAWN,EAAhB,UACE,uBAAOO,QAAQ,YAAf,uBACA,uBACEjD,KAAK,OACLkD,GAAG,YACHvD,MAAOiC,EACPuB,SAAUpB,EACVqB,OAAQpB,IAETF,GACC,mBAAGkB,UAAU,aAAb,gDAIN,sBAAKA,UAAWL,EAAhB,UACE,uBAAOM,QAAQ,QAAf,4BACA,uBACEjD,KAAK,QACLkD,GAAG,QACHvD,MAAOuC,EACPiB,SAAUd,EACVe,OAAQd,IAETF,GACC,mBAAGY,UAAU,aAAb,sDAGJ,qBAAKA,UAAU,eAAf,SACE,wBAAQK,UAAWb,EAAnB,wBAIP,ECvGcc,MARf,WACE,OACE,qBAAKN,UAAU,MAAf,SACE,cAAC,EAAD,KAGL,ECHYO,IAASC,WAAWC,SAASC,eAAe,SACpDC,OAAO,cAAC,EAAD,I","file":"static/js/main.94e4ec67.chunk.js","sourcesContent":["import { useReducer } from \"react\";\r\n\r\nconst initialInputState = {\r\n  value: \"\",\r\n  isTouched: false,\r\n};\r\n\r\nconst inputStateReducer = (state, action) => {\r\n  if (action.type === \"INPUT\") {\r\n    return { value: action.value, isTouched: state.isTouched };\r\n  }\r\n  if (action.type === \"BLUR\") {\r\n    return { value: state.value, isTouched: true };\r\n  }\r\n  if (action.type === \"RESET\") {\r\n    return initialInputState;\r\n  }\r\n  return initialInputState;\r\n};\r\n\r\nconst useInput = (validateValue) => {\r\n  const [inputState, dispatch] = useReducer(\r\n    inputStateReducer,\r\n    initialInputState\r\n  );\r\n\r\n  const valueIsValid = validateValue(inputState.value);\r\n  const hasError = !valueIsValid && inputState.isTouched;\r\n\r\n  const valueChangeHandler = (event) => {\r\n    dispatch({ type: \"INPUT\", value: event.target.value });\r\n  };\r\n\r\n  const inputBlurHandler = (event) => {\r\n    dispatch({ type: \"BLUR\" });\r\n  };\r\n\r\n  const reset = () => {\r\n    dispatch({ type: \"RESET\" });\r\n  };\r\n\r\n  return {\r\n    value: inputState.value,\r\n    isValid: valueIsValid,\r\n    hasError,\r\n    valueChangeHandler,\r\n    inputBlurHandler,\r\n    reset,\r\n  };\r\n};\r\n\r\nexport default useInput;\r\n","import useInput from \"../hooks/use-input\";\n\nconst isNotEmpty = (name) => name.trim() !== \"\";\n\nconst validateEmail = (email) => {\n  const re = /\\S+@\\S+\\.\\S+/;\n  return re.test(email);\n};\n\nconst BasicForm = (props) => {\n  const {\n    value: enteredName,\n    isValid: nameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetName,\n  } = useInput(isNotEmpty);\n\n  const {\n    value: enteredLastName,\n    isValid: lastNameIsValid,\n    hasError: lastNameInputHasError,\n    valueChangeHandler: lastNameChangeHandler,\n    inputBlurHandler: lastNameBlurHandler,\n    reset: resetlastName,\n  } = useInput(isNotEmpty);\n\n  const {\n    value: enteredEmail,\n    isValid: emailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmail,\n  } = useInput(validateEmail);\n\n  const isFormValid = nameIsValid && lastNameIsValid && emailIsValid;\n\n  const formSubmittedHandler = (event) => {\n    event.preventDefault();\n\n    if (!isFormValid) {\n      return;\n    }\n\n    console.log(enteredName, enteredLastName, enteredEmail);\n\n    resetName();\n    resetlastName();\n    resetEmail();\n  };\n\n  const nameClasses = !nameInputHasError\n    ? \"form-control\"\n    : \"form-control invalid\";\n\n  const lastNameClasses = !lastNameInputHasError\n    ? \"form-control\"\n    : \"form-control invalid\";\n\n  const emailClasses = !emailInputHasError\n    ? \"form-control\"\n    : \"form-control invalid\";\n\n  return (\n    <form onSubmit={formSubmittedHandler}>\n      <div className=\"control-group\">\n        <div className={nameClasses}>\n          <label htmlFor=\"first-name\">First Name</label>\n          <input\n            type=\"text\"\n            id=\"first-name\"\n            value={enteredName}\n            onChange={nameChangeHandler}\n            onBlur={nameBlurHandler}\n          />\n          {nameInputHasError && (\n            <p className=\"error-text\">Name must not be empty.</p>\n          )}\n        </div>\n        <div className={lastNameClasses}>\n          <label htmlFor=\"last-name\">Last Name</label>\n          <input\n            type=\"text\"\n            id=\"last-name\"\n            value={enteredLastName}\n            onChange={lastNameChangeHandler}\n            onBlur={lastNameBlurHandler}\n          />\n          {lastNameInputHasError && (\n            <p className=\"error-text\">Last name must not be empty.</p>\n          )}\n        </div>\n      </div>\n      <div className={emailClasses}>\n        <label htmlFor=\"email\">E-Mail Address</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          value={enteredEmail}\n          onChange={emailChangeHandler}\n          onBlur={emailBlurHandler}\n        />\n        {emailInputHasError && (\n          <p className=\"error-text\">Please provide a valid email address.</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!isFormValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default BasicForm;\n","import BasicForm from \"./components/BasicForm\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <BasicForm />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n"],"sourceRoot":""}